from pyspark.sql import SparkSession
import base64
spark = SparkSession.builder.master('local').appName('spark-read-from-bigquery').getOrCreate()
# Creating DataFrames
df1 = spark.read.format('bigquery').option('project','clouderatakedown-lab').option('table','hsi_consumption.product').load()
df2 = spark.read.format('bigquery').option('project','clouderatakedown-lab').option('table','hsi_consumption.pim_taxonomy').load()
# 2 - Print the Google BigQuery table
#df1.show()
df1.printSchema()
df2.printSchema()
# 3 - Creating or replacing a local temporary view with this DataFrame
df1.createOrReplaceTempView("product")
df2.createOrReplaceTempView("pim_taxonomy")
query=spark.sql("SELECT DISTINCT `PT`.`itid`, `PT`.`dental_taxonomy_description`, `PT`.`dental_taxonomy_level_01_code`, `PT`.`dental_taxonomy_level_01_description`, `PT`.`dental_taxonomy_level_02_code`, `PT`.`dental_taxonomy_level_02_description`, `PT`.`dental_taxonomy_level_03_code`, `PT`.`dental_taxonomy_level_03_description`, `PT`.`dental_taxonomy_level_04_code`, `PT`.`dental_taxonomy_level_04_description`, `PT`.`dental_taxonomy_level_05_code`, `PT`.`dental_taxonomy_level_05_description`, `PT`.`dental_taxonomy_level_06_code`, `PT`.`dental_taxonomy_level_06_description`, `PT`.`dental_taxonomy_structure`, (CASE WHEN (`PT`.`lab_taxonomy_description` = 'Lab E-Commerce Taxonomy') THEN 'Zahn E-Commerce Taxonomy' ELSE `PT`.`lab_taxonomy_description` END) as `lab_taxonomy_description`, `PT`.`lab_taxonomy_level_01_code`, `PT`.`lab_taxonomy_level_01_description`, `PT`.`lab_taxonomy_level_02_code`, `PT`.`lab_taxonomy_level_02_description`, `PT`.`lab_taxonomy_level_03_code`, `PT`.`lab_taxonomy_level_03_description`, `PT`.`lab_taxonomy_level_04_code`, `PT`.`lab_taxonomy_level_04_description`, `PT`.`lab_taxonomy_level_05_code`, `PT`.`lab_taxonomy_level_05_description`, `PT`.`lab_taxonomy_level_06_code`, `PT`.`lab_taxonomy_level_06_description`, `PT`.`lab_taxonomy_structure`, `PT`.`medical_taxonomy_description`, `PT`.`medical_taxonomy_level_01_code`, `PT`.`medical_taxonomy_level_01_description`, `PT`.`medical_taxonomy_level_02_code`, `PT`.`medical_taxonomy_level_02_description`, `PT`.`medical_taxonomy_level_03_code`, `PT`.`medical_taxonomy_level_03_description`, `PT`.`medical_taxonomy_level_04_code`, `PT`.`medical_taxonomy_level_04_description`, `PT`.`medical_taxonomy_level_05_code`, `PT`.`medical_taxonomy_level_05_description`, `PT`.`medical_taxonomy_level_06_code`, `PT`.`medical_taxonomy_level_06_description`, `PT`.`medical_taxonomy_structure`, `PT`.`primary_taxonomy_description`, `PT`.`primary_taxonomy_level_01_code`, `PT`.`primary_taxonomy_level_01_description`, `PT`.`primary_taxonomy_level_02_code`, `PT`.`primary_taxonomy_level_02_description`, `PT`.`primary_taxonomy_level_03_code`, `PT`.`primary_taxonomy_level_03_description`, `PT`.`primary_taxonomy_level_04_code`, `PT`.`primary_taxonomy_level_04_description`, `PT`.`primary_taxonomy_level_05_code`, `PT`.`primary_taxonomy_level_05_description`, `PT`.`primary_taxonomy_level_06_code`, `PT`.`primary_taxonomy_level_06_description`, `PT`.`primary_taxonomy_structure`, `PT`.`special_market_taxonomy_description`, `PT`.`special_market_taxonomy_level_01_code`, `PT`.`special_market_taxonomy_level_01_description`, `PT`.`special_market_taxonomy_level_02_code`, `PT`.`special_market_taxonomy_level_02_description`, `PT`.`special_market_taxonomy_level_03_code`, `PT`.`special_market_taxonomy_level_03_description`, `PT`.`special_market_taxonomy_level_04_code`, `PT`.`special_market_taxonomy_level_04_description`, `PT`.`special_market_taxonomy_level_05_code`, `PT`.`special_market_taxonomy_level_05_description`, `PT`.`special_market_taxonomy_level_06_code`, `PT`.`special_market_taxonomy_level_06_description`, `PT`.`special_market_taxonomy_structure`, (CASE WHEN (`PT`.`unspc_taxonomy_description` = 'UNSPC Taxonomy') THEN 'UNSPSC Taxonomy' ELSE `PT`.`unspc_taxonomy_description` END) as `unspc_taxonomy_description`, `PT`.`unspc_taxonomy_level_01_code`, `PT`.`unspc_taxonomy_level_01_description`, `PT`.`unspc_taxonomy_level_02_code`, `PT`.`unspc_taxonomy_level_02_description`, `PT`.`unspc_taxonomy_level_03_code`, `PT`.`unspc_taxonomy_level_03_description`, `PT`.`unspc_taxonomy_level_04_code`, `PT`.`unspc_taxonomy_level_04_description`, `PT`.`unspc_taxonomy_level_05_code`, `PT`.`unspc_taxonomy_level_05_description`, `PT`.`unspc_taxonomy_level_06_code`, `PT`.`unspc_taxonomy_level_06_description`, `PT`.`unspc_taxonomy_structure`, (CASE WHEN (NOT (`P`.`product_code` IS NULL)) THEN `P`.`product_code` WHEN (NOT ('--' IS NULL)) THEN '--' ELSE NULL END) as `product_code`, `P`.`product_short_description`, `P`.`dental_product_full_display_description`, `P`.`dental_product_short_display_description`, `P`.`lab_product_full_display_description`, `P`.`lab_product_short_display_description`, `P`.`medical_product_full_display_description`, `P`.`medical_product_short_display_description`, `P`.`sm_product_full_display_description`, `P`.`sm_product_short_display_description` FROM `pim_taxonomy` `PT` LEFT JOIN `product` `P` ON (`PT`.`itid` = `P`.`itid`)")
query.write.format('bigquery').mode('overwrite').option('temporaryGcsBucket','big_query_from_hadoop').option('table','hsi_consumption.dummyspark3').save()
